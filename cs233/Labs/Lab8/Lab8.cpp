/*
 * CS 233 Fall 2017 Lab 8
 * clang++ Lab8.cpp -o lab8
 */
#include <stdio.h>

void inv_byte_substitution(unsigned char *in, unsigned char *out);
void inv_mix_column(unsigned char *in, unsigned char *out);
void inv_shift_rows(unsigned char *in, unsigned int *out);
void rearrange_matrix(unsigned char *in, unsigned char *out);
void key_addition(unsigned char *in_one, unsigned char *in_two,
                  unsigned char *out);
unsigned int circular_shift(unsigned int in, unsigned char s);
extern unsigned char inv_sbox[256];
extern unsigned char inv_mix[4][256];

struct Node {
    int node_id;            // Unique node ID
    struct Node **children; // pointer to null terminated array of children node pointers
};

struct Shifter {
    unsigned int value;
    unsigned int *to_rotate[4];
};

// Part 1 Functions

/*
 * Function: decrypt
 * --------------------
 * Decrypts a ciphertext using an encryption key and stores the result
 * in a plaintext.
 *
 * ciphertext: pointer to the 16 bytes to be decrypted
 * plaintext: pointer to the 16 bytes where the decrypted result is to be stored
 * key: pointer to the 16 byte encryption key
 * rounds: the amount of times to run the main features of decryption,
 *         rounds is equal to the amount of rounds used in encryption
 *         (default is 10 for 128-bit keys).
 */
void
decrypt(unsigned char *ciphertext, unsigned char *plaintext, unsigned char *key,
        unsigned char rounds) {
    unsigned char A[16], B[16], C[16], D[16];
    key_addition(ciphertext, &key[16 * rounds], C);
    inv_shift_rows(C, (unsigned int *) B);
    inv_byte_substitution(B, A);
    for (unsigned int k = rounds - 1; k > 0; k--) {
        key_addition(A, &key[16 * k], D);
        inv_mix_column(D, C);
        inv_shift_rows(C, (unsigned int *) B);
        inv_byte_substitution(B, A);
    }
    key_addition(A, key, plaintext);
    return;
}

// Part 2 Functions

/*
 * Function: has_cycle
 * --------------------
 * Takes in a graph represented by the Node struct, and determines if
 * there is a cycle in the graph.
 *
 * root: root node of graph
 * num_nodes: total size (in number of nodes) of input graph, used for
 *            allocating stack space
 *
 * returns: whether or not a cycle exists in the graph
 */
int
has_cycle(Node *root, int num_nodes) {
    if (!root)
        return 0;

    Node *stack[num_nodes];
    stack[0] = root;
    int stack_size = 1;

    int discovered[num_nodes];
    for (int i = 0; i < num_nodes; i++) {
        discovered[i] = 0;
    }

    while (stack_size > 0) {
        Node *node_ptr = stack[--stack_size];

        if (discovered[node_ptr->node_id]) {
            return 1;
        }
        discovered[node_ptr->node_id] = 1;

        for (Node **edge_ptr = node_ptr->children; *edge_ptr; edge_ptr++) {
            stack[stack_size++] = *edge_ptr;
        }
    }

    return 0;
}

/*
 * Function: max_depth
 * --------------------
 * Takes in a tree represented by Node structs, and determines the
 * depth of the deepest child in the tree.
 *
 * current: the current (sub)tree the function operates on
 *
 * returns: depth of the deepest child relative to Node current
 */
int
max_depth(Node *current) {
    if (current == NULL)
        return 0;

    int cur_child = 0;
    Node *child = current->children[cur_child];
    int max = 0;
    while (child != NULL) {
        int depth = max_depth(child);
        if (depth > max)
            max = depth;
        cur_child++;
        child = current->children[cur_child];
    }
    return 1 + max;
}

/*
 * Function: shift_many
 * --------------------
 * Takes in a Shifter, and applies circular_shift to its value,
 * storing the outputs into the Shifter's to_rotate array.
 *
 * s: the shifter to operate on
 * offset: offset in the to_shift array to begin at
 */
void
shift_many(Shifter *s, int offset) {
    for (int i = 0; i < 4; i++) {
        unsigned int *ptr = s->to_rotate[i];

        if (ptr == NULL) {
            continue;
        }

        unsigned char x = (i + offset) & 3;
        *ptr = circular_shift(s->value, x);
    }
}

/*
 * Unit tests.
 * Feel free to add more if it helps with testing mips.
 */
void
test_max_depth() {
    // construct tree1
    Node *arr_t1n5[] = {NULL};
    Node t1n5 = {.node_id = 4, .children = arr_t1n5};
    Node *arr_t1n4[] = {&t1n5, NULL};
    Node t1n4 = {.node_id = 3, .children = arr_t1n4};
    Node *arr_t1n3[] = {&t1n4, NULL};
    Node t1n3 = {.node_id = 2, .children = arr_t1n3};
    Node *arr_t1n2[] = {&t1n3, NULL};
    Node t1n2 = {.node_id = 1, .children = arr_t1n2};
    Node *arr_t1n1[] = {&t1n2, NULL};
    Node tree1 = {.node_id = 0, .children = arr_t1n1};

    // construct tree2
    Node *arr_t2n6[] = {NULL};
    Node t2n6 = {.node_id = 5, .children = arr_t2n6};
    Node *arr_t2n5[] = {NULL};
    Node t2n5 = {.node_id = 4, .children = arr_t2n5};
    Node *arr_t2n4[] = {NULL};
    Node t2n4 = {.node_id = 3, .children = arr_t2n4};
    Node *arr_t2n3[] = {NULL};
    Node t2n3 = {.node_id = 2, .children = arr_t2n3};
    Node *arr_t2n2[] = {NULL};
    Node t2n2 = {.node_id = 1, .children = arr_t2n2};
    Node *arr_t2n1[] = {&t2n2, &t2n3, &t2n4, &t2n5, &t2n6, NULL};
    Node tree2 = {.node_id = 0, .children = arr_t2n1};

    // construct tree3
    Node *arr_t3n9[] = {NULL};
    Node t3n9 = {.node_id = 8, .children = arr_t3n9};
    Node *arr_t3n8[] = {NULL};
    Node t3n8 = {.node_id = 7, .children = arr_t3n8};
    Node *arr_t3n7[] = {NULL};
    Node t3n7 = {.node_id = 6, .children = arr_t3n7};
    Node *arr_t3n6[] = {NULL};
    Node t3n6 = {.node_id = 5, .children = arr_t3n6};
    Node *arr_t3n5[] = {&t3n8, &t3n9, NULL};
    Node t3n5 = {.node_id = 4, .children = arr_t3n5};
    Node *arr_t3n4[] = {&t3n6, &t3n7, NULL};
    Node t3n4 = {.node_id = 3, .children = arr_t3n4};
    Node *arr_t3n3[] = {&t3n5, NULL};
    Node t3n3 = {.node_id = 2, .children = arr_t3n3};
    Node *arr_t3n2[] = {NULL};
    Node t3n2 = {.node_id = 1, .children = arr_t3n2};
    Node *arr_t3n1[] = {&t3n2, &t3n3, &t3n4, NULL};
    Node tree3 = {.node_id = 0, .children = arr_t3n1};

    printf("max_depth(tree1): %d\n", max_depth(&tree1));
    printf("max_depth(tree2): %d\n", max_depth(&tree2));
    printf("max_depth(tree3): %d\n", max_depth(&tree3));
}

void
test_decrypt() {
    unsigned char key[176] = {
        0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88,
        0x09, 0xCF, 0x4F, 0x3C, 0xA0, 0xFA, 0xFE, 0x17, 0x88, 0x54, 0x2C, 0xB1,
        0x23, 0xA3, 0x39, 0x39, 0x2A, 0x6C, 0x76, 0x05, 0xF2, 0xC2, 0x95, 0xF2,
        0x7A, 0x96, 0xB9, 0x43, 0x59, 0x35, 0x80, 0x7A, 0x73, 0x59, 0xF6, 0x7F,
        0x3D, 0x80, 0x47, 0x7D, 0x47, 0x16, 0xFE, 0x3E, 0x1E, 0x23, 0x7E, 0x44,
        0x6D, 0x7A, 0x88, 0x3B, 0xEF, 0x44, 0xA5, 0x41, 0xA8, 0x52, 0x5B, 0x7F,
        0xB6, 0x71, 0x25, 0x3B, 0xDB, 0x0B, 0xAD, 0x00, 0xD4, 0xD1, 0xC6, 0xF8,
        0x7C, 0x83, 0x9D, 0x87, 0xCA, 0xF2, 0xB8, 0xBC, 0x11, 0xF9, 0x15, 0xBC,
        0x6D, 0x88, 0xA3, 0x7A, 0x11, 0x0B, 0x3E, 0xFD, 0xDB, 0xF9, 0x86, 0x41,
        0xCA, 0x00, 0x93, 0xFD, 0x4E, 0x54, 0xF7, 0x0E, 0x5F, 0x5F, 0xC9, 0xF3,
        0x84, 0xA6, 0x4F, 0xB2, 0x4E, 0xA6, 0xDC, 0x4F, 0xEA, 0xD2, 0x73, 0x21,
        0xB5, 0x8D, 0xBA, 0xD2, 0x31, 0x2B, 0xF5, 0x60, 0x7F, 0x8D, 0x29, 0x2F,
        0xAC, 0x77, 0x66, 0xF3, 0x19, 0xFA, 0xDC, 0x21, 0x28, 0xD1, 0x29, 0x41,
        0x57, 0x5C, 0x00, 0x6E, 0xD0, 0x14, 0xF9, 0xA8, 0xC9, 0xEE, 0x25, 0x89,
        0xE1, 0x3F, 0x0C, 0xC8, 0xB6, 0x63, 0x0C, 0xA6};
    unsigned char ciphertext[] = {0x61, 0xb7, 0xdd, 0x48, 0x82, 0xe7,
                                  0xe3, 0xbf, 0xc7, 0xd4, 0x43, 0x4f,
                                  0x3c, 0xea, 0x61, 0xdf, '\0'};
    unsigned char plaintext[17] = {0};
    unsigned char ciphertext_easy[] = {0x76, 0x12, 0x0d, 0x3e, 0x6b, 0x0a,
                                       0x9b, 0xf1, 0x06, 0x91, 0x01, 0xb2,
                                       0x69, 0xf0, 0xa3, 0x6c};
    unsigned char plaintext_easy[17] = {0};

    decrypt(ciphertext_easy, plaintext_easy, key, 1);
    decrypt(ciphertext, plaintext, key, 10);

    unsigned char ctext1[] = {0xf7, 0x1b, 0x08, 0xbb, 0xb1, 0x6d, 0x37, 0x8e,
                              0x28, 0x6e, 0x01, 0x98, 0xde, 0x6a, 0xb1, 0xab};
    unsigned char ptext1[17] = {0};
    unsigned char ctext1_easy[] = {0xaf, 0x2a, 0xde, 0xe6, 0xc1, 0x15,
                                   0x81, 0x31, 0x60, 0x26, 0x72, 0xfe,
                                   0xef, 0x53, 0xb1, 0x3c};
    unsigned char ptext1_easy[17] = {0};

    decrypt(ctext1_easy, ptext1_easy, key, 2);
    decrypt(ctext1, ptext1, key, 10);

    printf("decrypt(ciphertext_easy, plaintext_easy, key, 1): %s\n",
           plaintext_easy);
    printf("decrypt(ctext1_easy, ptext1_easy, key, 2): %s\n", ptext1);
    printf("decrypt(ciphertext, plaintext, key, 10): %s\n", plaintext);
    printf("decrypt(ctext1, ptext1, key, 10): %s\n", ptext1);
}

void
test_has_cycle() {
    // construct graph1
    Node *c1_children[] = {NULL};
    Node c1 = {.node_id = 3, .children = c1_children};
    Node *b1_children[] = {&c1, NULL};
    Node b1 = {.node_id = 2, .children = b1_children};
    Node *a1_children[] = {NULL};
    Node a1 = {.node_id = 1, .children = a1_children};
    Node *root1_children[] = {&a1, &b1, NULL};
    Node root1 = {.node_id = 0, .children = root1_children};

    // construct graph2
    Node *c2_children[] = {NULL};
    Node c2 = {.node_id = 3, .children = c2_children};
    Node *b2_children[] = {&c2, NULL};
    Node b2 = {.node_id = 2, .children = b2_children};
    Node *a2_children[] = {&c2, NULL};
    Node a2 = {.node_id = 1, .children = a2_children};
    Node *root2_children[] = {&a2, &b2, NULL};
    Node root2 = {.node_id = 0, .children = root2_children};

    printf("has_cycle(root1, 4): %d\n", has_cycle(&root1, 4));
    printf("has_cycle(root2, 4): %d\n", has_cycle(&root2, 4));
    printf("has_cycle(NULL, 42): %d\n", has_cycle(NULL, 42));
}


void
test_shift_many() {
    unsigned int i1 = 0;
    unsigned int i2 = 0;
    unsigned int i3 = 0;
    unsigned int i4 = 0;
    Shifter s1 = {.value = 0xDEADBEEF, .to_rotate = {&i1, &i2, &i3, &i4}};
    shift_many(&s1, 0);

    printf("shift_many(s1, 0): 0x%x 0x%x 0x%x 0x%x\n", i1, i2, i3, i4);

    Shifter s2 = {.value = 0x00FF00AA, .to_rotate = {&i1, &i2, &i3, &i4}};
    shift_many(&s2, 3);

    printf("shift_many(s2, 3): 0x%x 0x%x 0x%x 0x%x\n", i1, i2, i3, i4);

    Shifter s3 = {.value = 0x12345678, .to_rotate = {&i1, NULL, &i3, &i4}};
    shift_many(&s3, 2);

    printf("shift_many(s3, 2): 0x%x NULL 0x%x 0x%x\n", i1, i3, i4);
}

int
main() {
    test_decrypt();
    test_has_cycle();
    test_max_depth();
    test_shift_many();
    return 0;
}

// Lab8 helper functions
unsigned int
circular_shift(unsigned int in, unsigned char s) {
    return (in >> 8 * s) | (in << (32 - 8 * s));
}

void
key_addition(unsigned char *in_one, unsigned char *in_two, unsigned char *out) {
    for (unsigned int i = 0; i < 16; i++) {
        out[i] = in_one[i] ^ in_two[i];
    }
}

void
rearrange_matrix(unsigned char *in, unsigned int *out) {
    for (unsigned int i = 0; i < 4; i++) {
        out[i] = 0;
        for (unsigned int j = 0; j < 4; j++) {
            out[i] = out[i] | in[4 * j + i] << 8 * j;
        }
    }
}

void
inv_byte_substitution(unsigned char *in, unsigned char *out) {
    for (unsigned int i = 0; i < 16; i++) {
        out[i] = inv_sbox[in[i]];
    }
    return;
}

void
inv_shift_rows(unsigned char *in, unsigned int *out) {
    unsigned int tmp[4];
    rearrange_matrix(in, tmp);
    for (unsigned int i = 0; i < 4; i++) {
        tmp[i] = circular_shift(tmp[i], 4 - i);
    }
    rearrange_matrix((unsigned char *) tmp, out);
    return;
}

void
inv_mix_column(unsigned char *in, unsigned char *out) {
    for (unsigned int k = 0; k < 4; k++) {
        for (unsigned int i = 0; i < 4; i++) {
            out[4 * k + i] = 0;
            for (unsigned int j = 0; j < 4; j++) {
                out[4 * k + i] ^= inv_mix[j][in[4 * k + (i + j) % 4]];
            }
        }
    }
}

unsigned char inv_sbox[256] = {
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E,
    0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32,
    0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49,
    0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50,
    0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05,
    0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41,
    0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8,
    0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B,
    0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59,
    0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D,
    0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63,
    0x55, 0x21, 0x0C, 0x7D};

unsigned char inv_mix[4][256] = {
    {0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62,
     0x48, 0x46, 0x54, 0x5a, 0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca,
     0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9,
     0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
     0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59,
     0x73, 0x7d, 0x6f, 0x61, 0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87,
     0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51, 0x5f,
     0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17,
     0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14,
     0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc,
     0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 0x41, 0x4f, 0x5d, 0x53,
     0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
     0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3,
     0xe9, 0xe7, 0xf5, 0xfb, 0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0,
     0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68,
     0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
     0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e,
     0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26,
     0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39, 0x2b, 0x25,
     0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d,
     0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5,
     0x9f, 0x91, 0x83, 0x8d},
    {0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45,
     0x74, 0x7f, 0x62, 0x69, 0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81,
     0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66,
     0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
     0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e,
     0xbf, 0xb4, 0xa9, 0xa2, 0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7,
     0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50, 0x5b,
     0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f,
     0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8,
     0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c,
     0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 0xf7, 0xfc, 0xe1, 0xea,
     0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
     0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02,
     0x33, 0x38, 0x25, 0x2e, 0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd,
     0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21,
     0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
     0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44,
     0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80,
     0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71, 0x6c, 0x67,
     0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13,
     0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f,
     0xbe, 0xb5, 0xa8, 0xa3},
    {0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f,
     0x5c, 0x51, 0x46, 0x4b, 0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3,
     0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac,
     0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
     0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14,
     0x37, 0x3a, 0x2d, 0x20, 0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e,
     0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7, 0xaa,
     0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6,
     0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9,
     0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25,
     0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 0xda, 0xd7, 0xc0, 0xcd,
     0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
     0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75,
     0x56, 0x5b, 0x4c, 0x41, 0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42,
     0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6,
     0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
     0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8,
     0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44,
     0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01, 0x16, 0x1b,
     0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47,
     0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3,
     0x80, 0x8d, 0x9a, 0x97},
    {0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53,
     0x6c, 0x65, 0x7e, 0x77, 0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf,
     0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20,
     0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
     0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8,
     0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49,
     0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd,
     0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91,
     0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e,
     0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2,
     0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7,
     0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
     0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f,
     0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8,
     0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c,
     0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
     0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9,
     0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35,
     0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba,
     0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6,
     0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62,
     0x5d, 0x54, 0x4f, 0x46}};
